def myContainer = '''
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: shell
    image: ubuntu
    alwaysPullImage: false
    command:
    - sleep
    args:
    - "9999999"
'''

def printOutput( String sourceName ) {
    echo sourceName 
    echo "did this work?"
    sh '''
        echo "HOST: $(hostname)"
        echo "--------------------"
        echo ${sourceName}
        echo "I am using the ${sourceName}"
        echo "-Env-------------------"
        env 
        echo "-PrintEnv-------------------"
        printenv | sort
        echo "=============================" 
    '''
}

//Options for creating the container 
// 1) yamlFile
//     yamlFile 'jenkins-pod.yaml'
// 2) containerTemplate 
//     containerTemplate {
//       name 'shell'
//       image 'ubuntu'
//       command 'sleep'
//       args 'infinity'
//     }
// 3) inline Yaml
//     yaml '''
//yaml goes here
//'''
// 4) inline yaml
//    define a variable that defines the container
//    and reference it with 
//    yaml <var_name>

// Uses Declarative syntax to run commands inside a container.
pipeline {
    // default agent
    // otherwise declare agent none 
    agent {
        kubernetes {
            yaml myContainer
            defaultContainer 'shell'
        }
    }
    stages {
        stage('Default Agent') {
            steps {
                printOutput("Default Agent" )
            }
        }
        stage('YAMLFILE') {
            agent { 
                kubernetes { 
                    yamlFile 'jenkins-pod.yaml' 
                    defaultContainer 'shell'
                }
            }
            steps {
                printOutput("YamlFile")
            }
        }
    }
    post {
        always {
            echo "This will always run"
        }
        aborted {
            echo "This job was aborted.  Hope you aren't in Texas"
        }
        failure {
            echo "This job failed"
        }
    }
}
